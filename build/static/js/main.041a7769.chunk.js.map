{"version":3,"sources":["canvas.tsx","view.tsx","index.tsx"],"names":["PureCanvas","React","forwardRef","props","ref","canvasRef","mouseX","mouseY","getContext","current","useState","base64Data","setbase64Data","DrawEnd","e","canvas","toDataURL","Draw","x","y","ctx","beginPath","globalAlpha","moveTo","lineTo","lineCap","lineWidth","strokeStyle","stroke","id","onMouseDown","button","rect","getBoundingClientRect","clientX","left","clientY","top","onMouseMove","buttons","onMouseUp","onMouseOut","style","border","onClick","clearRect","window","innerWidth","onSubmit","event","preventDefault","axios","post","base64","String","replace","font_name","then","res","console","log","type","Canvas","useRef","useEffect","handleResize","height","innerHeight","width","addEventListener","removeEventListener","View","className","placeholder","ReactDOM","render","StrictMode","display","document","getElementById"],"mappings":"wLAYMA,EAAaC,IAAMC,YAAW,SAACC,EAAOC,GAC1C,IAAMC,EAAYD,EACdE,EAAwB,KACxBC,EAAwB,KACtBC,EAAa,WAEjB,OADoBH,EAAUI,QAChBD,WAAW,OAN4B,EAQnBE,qBARmB,mBAQhDC,EARgD,KAQpCC,EARoC,KAgCjDC,EAAU,SAACC,GACf,IAAMC,EAAcV,EAAUI,QAC9BH,EAAS,KACTC,EAAS,KACTK,EAAcG,EAAOC,UAAU,eAG3BC,EAAO,SAACC,EAAWC,GACvB,IAAMC,EAAMZ,IACZY,EAAIC,YACJD,EAAIE,YAAc,EACH,OAAXhB,GAA8B,OAAXC,EACrBa,EAAIG,OAAOL,EAAGC,GAEdC,EAAIG,OAAOjB,EAAQC,GAErBa,EAAII,OAAON,EAAGC,GACdC,EAAIK,QAAU,SACdL,EAAIM,UAAY,EAChBN,EAAIO,YAAc,UAClBP,EAAIQ,SACJtB,EAASY,EACTX,EAASY,GA2BX,OACE,gCACE,wBACEU,GAAG,SACHC,YA3EU,SAAChB,GACf,GAAiB,IAAbA,EAAEiB,OAAN,CAGA,IACMC,EADc3B,EAAUI,QACHwB,wBACrBf,KAAOJ,EAAEoB,QAAUF,EAAKG,MACxBhB,KAAOL,EAAEsB,QAAUJ,EAAKK,KAC9BpB,EAAKC,EAAGC,KAoEJmB,YAjES,SAACxB,GACd,GAAkB,IAAdA,EAAEyB,QAAN,CAGA,IACMP,EADc3B,EAAUI,QACHwB,wBACrBf,KAAOJ,EAAEoB,QAAUF,EAAKG,MACxBhB,KAAOL,EAAEsB,QAAUJ,EAAKK,KAC9BpB,EAAKC,EAAGC,KA0DJqB,UAAW3B,EACX4B,WAAY5B,EACZT,IAAKC,EACLqC,MAAO,CACLC,OAAQ,eAGZ,wBAAQC,QArCE,WACApC,IACRqC,UAAU,EAAG,EAAGC,OAAOC,WAAYD,OAAOC,YAE9C,IAAMhC,EAAcV,EAAUI,QAC9BG,EAAcG,EAAOC,UAAU,eAgC7B,sCACA,sBAAMgC,SA9BW,SAACC,GACpBA,EAAMC,iBAENC,IACGC,KACC,mEACA,CACEC,OAAQC,OAAO3C,GAAY4C,QAAQ,OAAQ,IAC3CC,UAAW,MAGdC,MAAK,SAACC,GACLC,QAAQC,IAAIF,OAkBd,SACE,wBAAQG,KAAK,SAAb,0DAqCOC,EA/BU,WACvB,IAAIzD,EAAY0D,iBAAiC,MAuBjD,OArBAC,qBAAU,WACR,IACM5C,EADYf,EAAUI,QACXD,WAAW,MAEtByD,EAAe,WACnB7C,EAAIL,OAAOmD,OACTpB,OAAOqB,YAAcrB,OAAOC,WACJ,GAApBD,OAAOC,WACc,GAArBD,OAAOqB,YACb/C,EAAIL,OAAOqD,MACTtB,OAAOqB,YAAcrB,OAAOC,WACJ,GAApBD,OAAOC,WACc,GAArBD,OAAOqB,aAMf,OAHAF,IACAnB,OAAOuB,iBAAiB,SAAUJ,GAE3B,kBAAMnB,OAAOwB,oBAAoB,SAAUL,MACjD,IAGD,8BACE,cAACjE,EAAD,CAAYI,IAAKC,OChIRkE,G,MATQ,SAACpE,GACtB,OACE,oCACE,oBAAIqE,UAAU,QAAd,4CACA,uBAAOX,KAAK,OAAOW,UAAU,QAAQC,YAAY,UCFvDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,sBAAKlC,MAAO,CAAEmC,QAAS,UAAvB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,SAGJC,SAASC,eAAe,W","file":"static/js/main.041a7769.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\ninterface IRect {\n  width: number;\n  height: number;\n  left: number;\n  right: number;\n  top: number;\n  bottom: number;\n}\n\nconst PureCanvas = React.forwardRef((props, ref: any) => {\n  const canvasRef = ref;\n  let mouseX: number | null = null;\n  let mouseY: number | null = null;\n  const getContext = (): CanvasRenderingContext2D => {\n    const canvas: any = canvasRef.current;\n    return canvas.getContext(\"2d\");\n  };\n  const [base64Data, setbase64Data] = useState();\n\n  const OnClick = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (e.button !== 0) {\n      return;\n    }\n    const canvas: any = canvasRef.current;\n    const rect: IRect = canvas.getBoundingClientRect();\n    const x = ~~(e.clientX - rect.left);\n    const y = ~~(e.clientY - rect.top);\n    Draw(x, y);\n  };\n\n  const OnMove = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (e.buttons !== 1) {\n      return;\n    }\n    const canvas: any = canvasRef.current;\n    const rect: IRect = canvas.getBoundingClientRect();\n    const x = ~~(e.clientX - rect.left);\n    const y = ~~(e.clientY - rect.top);\n    Draw(x, y);\n  };\n\n  const DrawEnd = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas: any = canvasRef.current;\n    mouseX = null;\n    mouseY = null;\n    setbase64Data(canvas.toDataURL(\"image/png\"));\n  };\n\n  const Draw = (x: number, y: number) => {\n    const ctx = getContext();\n    ctx.beginPath();\n    ctx.globalAlpha = 1.0;\n    if (mouseX === null || mouseY === null) {\n      ctx.moveTo(x, y);\n    } else {\n      ctx.moveTo(mouseX, mouseY);\n    }\n    ctx.lineTo(x, y);\n    ctx.lineCap = \"square\";\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = \"#000000\";\n    ctx.stroke();\n    mouseX = x;\n    mouseY = y;\n  };\n\n  const Reset = () => {\n    const ctx = getContext();\n    ctx.clearRect(0, 0, window.innerWidth, window.innerWidth);\n\n    const canvas: any = canvasRef.current;\n    setbase64Data(canvas.toDataURL(\"image/png\"));\n  };\n\n  const handleSubmit = (event: any) => {\n    event.preventDefault();\n\n    axios\n      .post(\n        \"https://2sk1ffqhlh.execute-api.ap-northeast-1.amazonaws.com/prod\",\n        {\n          base64: String(base64Data).replace(/^.*,/, \"\"),\n          font_name: \"a\",\n        }\n      )\n      .then((res) => {\n        console.log(res);\n      });\n  };\n\n  return (\n    <div>\n      <canvas\n        id=\"canvas\"\n        onMouseDown={OnClick}\n        onMouseMove={OnMove}\n        onMouseUp={DrawEnd}\n        onMouseOut={DrawEnd}\n        ref={canvasRef}\n        style={{\n          border: \"2px solid\",\n        }}\n      />\n      <button onClick={Reset}>リセット</button>\n      <form onSubmit={handleSubmit}>\n        <button type=\"submit\">アップロード</button>\n      </form>\n    </div>\n  );\n});\n\nconst Canvas: React.FC = () => {\n  let canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n  useEffect(() => {\n    const ctx1: any = canvasRef.current!;\n    const ctx = ctx1.getContext(\"2d\");\n\n    const handleResize = () => {\n      ctx.canvas.height =\n        window.innerHeight > window.innerWidth\n          ? window.innerWidth * 0.8\n          : window.innerHeight * 0.8;\n      ctx.canvas.width =\n        window.innerHeight > window.innerWidth\n          ? window.innerWidth * 0.8\n          : window.innerHeight * 0.8;\n    };\n\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return (\n    <div>\n      <PureCanvas ref={canvasRef} />\n    </div>\n  );\n};\n\nexport default Canvas;\n","import React, { useRef, useState } from \"react\";\nimport \"./view.css\";\n\nconst View: React.FC = (props) => {\n  return (\n    <section>\n      <h1 className=\"tsuno\">あいうえお</h1>\n      <input type=\"text\" className=\"input\" placeholder=\"\" />\n    </section>\n  );\n};\n\nexport default View;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Canvas from \"./canvas\";\nimport View from \"./view\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <div style={{ display: \"inline\" }}>\n      <Canvas></Canvas>\n      <View></View>\n    </div>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}