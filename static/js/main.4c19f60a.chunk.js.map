{"version":3,"sources":["canvas.tsx","view.tsx","index.tsx"],"names":["Canvas","props","length","canvasRef","useRef","mouseX","mouseY","useState","setbase64Data","getContext","current","DrawEnd","e","Save","Draw","x","y","ctx","beginPath","globalAlpha","moveTo","lineTo","lineCap","lineWidth","strokeStyle","stroke","canvas","toDataURL","onMouseDown","button","rect","getBoundingClientRect","clientX","left","clientY","top","onMouseMove","buttons","onMouseUp","onMouseOut","ref","width","height","style","border","onClick","clearRect","View","className","type","placeholder","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qKA4GeA,EA7FkB,SAACC,GAAW,IACnCC,EAAWD,EAAXC,OACJC,EAAYC,iBAAiC,MAC7CC,EAAwB,KACxBC,EAAwB,KAJc,EAKNC,qBALM,mBAKvBC,GALuB,WAOpCC,EAAa,WAEjB,OADoBN,EAAUO,QAChBD,WAAW,OAyBrBE,EAAU,SAACC,GACfP,EAAS,KACTC,EAAS,KACTO,KAGIC,EAAO,SAACC,EAAWC,GACvB,IAAMC,EAAMR,IACZQ,EAAIC,YACJD,EAAIE,YAAc,EACH,OAAXd,GAA8B,OAAXC,EACrBW,EAAIG,OAAOL,EAAGC,GAEdC,EAAIG,OAAOf,EAAQC,GAErBW,EAAII,OAAON,EAAGC,GACdC,EAAIK,QAAU,SACdL,EAAIM,UAAY,EAChBN,EAAIO,YAAc,UAClBP,EAAIQ,SACJpB,EAASU,EACTT,EAASU,GAULH,EAAO,WACX,IAAMa,EAAcvB,EAAUO,QAC9BF,EAAckB,EAAOC,UAAU,YAAa,OAG9C,OACE,oCACE,8BACE,wBACEC,YA9DQ,SAAChB,GACf,GAAiB,IAAbA,EAAEiB,OAAN,CAGA,IACMC,EADc3B,EAAUO,QACHqB,wBACrBhB,KAAOH,EAAEoB,QAAUF,EAAKG,MACxBjB,KAAOJ,EAAEsB,QAAUJ,EAAKK,KAC9BrB,EAAKC,EAAGC,KAuDFoB,YApDO,SAACxB,GACd,GAAkB,IAAdA,EAAEyB,QAAN,CAGA,IACMP,EADc3B,EAAUO,QACHqB,wBACrBhB,KAAOH,EAAEoB,QAAUF,EAAKG,MACxBjB,KAAOJ,EAAEsB,QAAUJ,EAAKK,KAC9BrB,EAAKC,EAAGC,KA6CFsB,UAAW3B,EACX4B,WAAY5B,EACZ6B,IAAKrC,EACLsC,MAAK,UAAKvC,EAAL,MACLwC,OAAM,UAAKxC,EAAL,MACNyC,MAAO,CAAEC,OAAQ,iBAGrB,gCACE,wBAAQC,QA3BA,WACApC,IACRqC,UAAU,EAAG,EAAG5C,EAAQA,GAE5BW,KAuBI,sCACA,wBAAQgC,QAAShC,EAAjB,iCCzFOkC,G,MATQ,SAAC9C,GACtB,OACE,oCACE,oBAAI+C,UAAU,QAAd,4CACA,uBAAOC,KAAK,OAAOD,UAAU,QAAQE,YAAY,UCFvDC,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,CAAQnD,OAAQ,MAChB,cAAC,EAAD,OAEFoD,SAASC,eAAe,W","file":"static/js/main.4c19f60a.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\n\ninterface IProps {\n  length: number;\n}\n\ninterface IRect {\n  width: number;\n  height: number;\n  left: number;\n  right: number;\n  top: number;\n  bottom: number;\n}\n\nconst Canvas: React.FC<IProps> = (props) => {\n  const { length } = props;\n  let canvasRef = useRef<HTMLCanvasElement | null>(null);\n  let mouseX: number | null = null;\n  let mouseY: number | null = null;\n  const [base64Data, setbase64Data] = useState();\n\n  const getContext = (): CanvasRenderingContext2D => {\n    const canvas: any = canvasRef.current;\n    return canvas.getContext(\"2d\");\n  };\n\n  const OnClick = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (e.button !== 0) {\n      return;\n    }\n    const canvas: any = canvasRef.current;\n    const rect: IRect = canvas.getBoundingClientRect();\n    const x = ~~(e.clientX - rect.left);\n    const y = ~~(e.clientY - rect.top);\n    Draw(x, y);\n  };\n\n  const OnMove = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (e.buttons !== 1) {\n      return;\n    }\n    const canvas: any = canvasRef.current;\n    const rect: IRect = canvas.getBoundingClientRect();\n    const x = ~~(e.clientX - rect.left);\n    const y = ~~(e.clientY - rect.top);\n    Draw(x, y);\n  };\n\n  const DrawEnd = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    mouseX = null;\n    mouseY = null;\n    Save();\n  };\n\n  const Draw = (x: number, y: number) => {\n    const ctx = getContext();\n    ctx.beginPath();\n    ctx.globalAlpha = 1.0;\n    if (mouseX === null || mouseY === null) {\n      ctx.moveTo(x, y);\n    } else {\n      ctx.moveTo(mouseX, mouseY);\n    }\n    ctx.lineTo(x, y);\n    ctx.lineCap = \"square\";\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = \"#000000\";\n    ctx.stroke();\n    mouseX = x;\n    mouseY = y;\n  };\n\n  const Reset = () => {\n    const ctx = getContext();\n    ctx.clearRect(0, 0, length, length);\n\n    Save();\n  };\n\n  const Save = () => {\n    const canvas: any = canvasRef.current;\n    setbase64Data(canvas.toDataURL(\"image/png\", 0.85));\n  };\n\n  return (\n    <section>\n      <div>\n        <canvas\n          onMouseDown={OnClick}\n          onMouseMove={OnMove}\n          onMouseUp={DrawEnd}\n          onMouseOut={DrawEnd}\n          ref={canvasRef}\n          width={`${length}px`}\n          height={`${length}px`}\n          style={{ border: \"2px solid\" }}\n        />\n      </div>\n      <div>\n        <button onClick={Reset}>リセット</button>\n        <button onClick={Save}>保存</button>\n        {/* <img src={base64Data} /> */}\n      </div>\n    </section>\n  );\n};\n\nexport default Canvas;\n","import React, { useRef, useState } from \"react\";\nimport \"./view.css\";\n\nconst View: React.FC = (props) => {\n  return (\n    <section>\n      <h1 className=\"tsuno\">あいうえお</h1>\n      <input type=\"text\" className=\"input\" placeholder=\"\" />\n    </section>\n  );\n};\n\nexport default View;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Canvas from \"./canvas\";\nimport View from \"./view\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Canvas length={800}></Canvas>\n    <View />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}