{"version":3,"sources":["canvas.tsx","view.tsx","FontFace.tsx","index.tsx"],"names":["PureCanvas","React","forwardRef","props","ref","canvasRef","mouseX","mouseY","getContext","current","useState","base64Data","setbase64Data","fontName","setFontName","DrawEnd","e","canvas","toDataURL","Draw","x","y","ctx","beginPath","globalAlpha","moveTo","lineTo","lineCap","lineWidth","strokeStyle","stroke","id","onMouseDown","button","rect","getBoundingClientRect","clientX","left","clientY","top","onMouseMove","buttons","onMouseUp","onMouseOut","style","border","onClick","clearRect","window","innerWidth","onSubmit","event","preventDefault","axios","post","base64","String","replace","font_name","then","res","console","log","location","href","type","value","onChange","target","Canvas","useRef","useEffect","handleResize","height","innerHeight","width","addEventListener","removeEventListener","TextArea","styled","textarea","View","className","FontFace","createGlobalStyle","Date","getTime","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de9b868d.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\ninterface IRect {\n  width: number;\n  height: number;\n  left: number;\n  right: number;\n  top: number;\n  bottom: number;\n}\n\nconst PureCanvas = React.forwardRef((props, ref: any) => {\n  const canvasRef = ref;\n  let mouseX: number | null = null;\n  let mouseY: number | null = null;\n  const getContext = (): CanvasRenderingContext2D => {\n    const canvas: any = canvasRef.current;\n    return canvas.getContext(\"2d\");\n  };\n  const [base64Data, setbase64Data] = useState();\n  const [fontName, setFontName] = useState(\"\");\n\n  const OnClick = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (e.button !== 0) {\n      return;\n    }\n    const canvas: any = canvasRef.current;\n    const rect: IRect = canvas.getBoundingClientRect();\n    const x = ~~(e.clientX - rect.left);\n    const y = ~~(e.clientY - rect.top);\n    Draw(x, y);\n  };\n\n  const OnMove = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (e.buttons !== 1) {\n      return;\n    }\n    const canvas: any = canvasRef.current;\n    const rect: IRect = canvas.getBoundingClientRect();\n    const x = ~~(e.clientX - rect.left);\n    const y = ~~(e.clientY - rect.top);\n    Draw(x, y);\n  };\n\n  const DrawEnd = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas: any = canvasRef.current;\n    mouseX = null;\n    mouseY = null;\n    setbase64Data(canvas.toDataURL(\"image/png\"));\n  };\n\n  const Draw = (x: number, y: number) => {\n    const ctx = getContext();\n    ctx.beginPath();\n    ctx.globalAlpha = 1.0;\n    if (mouseX === null || mouseY === null) {\n      ctx.moveTo(x, y);\n    } else {\n      ctx.moveTo(mouseX, mouseY);\n    }\n    ctx.lineTo(x, y);\n    ctx.lineCap = \"square\";\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = \"#000000\";\n    ctx.stroke();\n    mouseX = x;\n    mouseY = y;\n  };\n\n  const Reset = () => {\n    const ctx = getContext();\n    ctx.clearRect(0, 0, window.innerWidth, window.innerWidth);\n\n    const canvas: any = canvasRef.current;\n    setbase64Data(canvas.toDataURL(\"image/png\"));\n  };\n\n  const handleSubmit = (event: any) => {\n    event.preventDefault();\n\n    axios\n      .post(\"https://18.180.152.54/\", {\n        base64: String(base64Data).replace(/^.*,/, \"\"),\n        font_name: fontName,\n      })\n      .then((res) => {\n        console.log(res);\n        window.location.href = window.location.href;\n      });\n  };\n\n  return (\n    <div>\n      <canvas\n        id=\"canvas\"\n        onMouseDown={OnClick}\n        onMouseMove={OnMove}\n        onMouseUp={DrawEnd}\n        onMouseOut={DrawEnd}\n        ref={canvasRef}\n        style={{\n          border: \"2px solid\",\n        }}\n      />\n      <button onClick={Reset}>リセット</button>\n      <form onSubmit={handleSubmit}>\n        <p>\n          font_name:{\" \"}\n          <input\n            type=\"text\"\n            value={fontName}\n            onChange={(event) => setFontName(event.target.value)}\n          />\n        </p>\n        <button type=\"submit\">アップロード</button>\n      </form>\n      {/* <a href={base64Data} download=\"a.png\">\n        ダウンロード\n      </a> */}\n    </div>\n  );\n});\n\nconst Canvas: React.FC = () => {\n  let canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n  useEffect(() => {\n    const ctx1: any = canvasRef.current!;\n    const ctx = ctx1.getContext(\"2d\");\n\n    const handleResize = () => {\n      ctx.canvas.height =\n        window.innerHeight > window.innerWidth\n          ? window.innerWidth * 0.8\n          : window.innerHeight * 0.8;\n      ctx.canvas.width =\n        window.innerHeight > window.innerWidth\n          ? window.innerWidth * 0.8\n          : window.innerHeight * 0.8;\n    };\n\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return (\n    <div>\n      <PureCanvas ref={canvasRef} />\n    </div>\n  );\n};\n\nexport default Canvas;\n","import React from \"react\";\n\nimport styled from \"styled-components\";\n\nconst TextArea = styled.textarea`\n  font-family: \"tsuno\";\n  width: 100%;\n  height: 900px;\n  font-size: 40px;\n`;\n\nconst View: React.FC = (props) => {\n  return (\n    <section>\n      <h1 className=\"tsuno\">\n        {/* 政府は安倍政権で配布した布マスク、いわゆる「アベノマスク」の在庫を希望する自治体や個人に配布する方針であることを、松野官房長官が記者会見で明らかにした。\n        【映像】“アベノマスク”在庫 希望者などに配布へ\n        アベノマスクは8000万枚を超える在庫があり、保管にかかる費用などが問題となっている。岸田総理大臣はアベノマスクの在庫について、「有効活用の道を探りたい」としていた。\n        今日の会見で布マスクの有効活用や廃棄の可能性について問われた松野官房長官は、「一般的に販売されているマスクの性能についてはさまざまな研究があるが、布製マスクについても一定程度のウイルスを捕集する性能があるものと承知している」とした上で、「布製マスクの在庫については、これまで行ってきた介護施設等への随時配布のほか、さらなる有効活用の方策として、希望する自治体に配布をし、災害備蓄や地域住民への配布などで活用していただくこと。希望する個人の方へ国から配付をすることなどの取り組みを進めることとしており、今後とも厚生労働省において布製マスクの在庫の解消に向けた取り組みを検討していくものと承知している」と述べた。（ANNニュース） */}\n      </h1>\n      <p></p>\n      <TextArea />\n    </section>\n  );\n};\n\nexport default View;\n","import { createGlobalStyle } from \"styled-components\";\n\nconst FontFace = createGlobalStyle`\n@font-face {\n  font-family: \"tsuno\";\n  src: url(\"https://font-a.s3.ap-northeast-1.amazonaws.com/a.ttf?${new Date().getTime()}\")\n    format(\"opentype\");\n}\n`;\n\nexport default FontFace;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Canvas from \"./canvas\";\nimport View from \"./view\";\nimport FontFace from \"./FontFace\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <FontFace></FontFace>\n    <Canvas></Canvas>\n    <View></View>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}