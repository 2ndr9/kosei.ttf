{"version":3,"sources":["canvas.tsx","index.tsx"],"names":["PureCanvas","React","forwardRef","props","ref","canvasRef","mouseX","mouseY","getContext","current","DrawEnd","e","Draw","x","y","ctx","beginPath","globalAlpha","moveTo","lineTo","lineCap","lineWidth","strokeStyle","stroke","useState","setbase64Data","Save","canvas","toDataURL","id","onMouseDown","button","rect","getBoundingClientRect","clientX","left","clientY","top","onMouseMove","buttons","onMouseUp","onMouseOut","style","border","onClick","clearRect","window","innerWidth","Canvas","useRef","useEffect","handleResize","height","innerHeight","width","addEventListener","removeEventListener","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gJAWMA,EAAaC,IAAMC,YAAW,SAACC,EAAOC,GAC1C,IAAMC,EAAYD,EACdE,EAAwB,KACxBC,EAAwB,KACtBC,EAAa,WAEjB,OADoBH,EAAUI,QAChBD,WAAW,OAyBrBE,EAAU,SAACC,GACfL,EAAS,KACTC,EAAS,MAILK,EAAO,SAACC,EAAWC,GACvB,IAAMC,EAAMP,IACZO,EAAIC,YACJD,EAAIE,YAAc,EACH,OAAXX,GAA8B,OAAXC,EACrBQ,EAAIG,OAAOL,EAAGC,GAEdC,EAAIG,OAAOZ,EAAQC,GAErBQ,EAAII,OAAON,EAAGC,GACdC,EAAIK,QAAU,SACdL,EAAIM,UAAY,EAChBN,EAAIO,YAAc,UAClBP,EAAIQ,SACJjB,EAASO,EACTN,EAASO,GApD4C,EA8DnBU,qBA9DmB,mBA8DpCC,GA9DoC,WA+DjDC,EAAO,WACX,IAAMC,EAActB,EAAUI,QAC9BgB,EAAcE,EAAOC,UAAU,YAAa,OAG9C,OACE,gCACE,wBACEC,GAAG,SACHC,YA/DU,SAACnB,GACf,GAAiB,IAAbA,EAAEoB,OAAN,CAGA,IACMC,EADc3B,EAAUI,QACHwB,wBACrBpB,KAAOF,EAAEuB,QAAUF,EAAKG,MACxBrB,KAAOH,EAAEyB,QAAUJ,EAAKK,KAC9BzB,EAAKC,EAAGC,KAwDJwB,YArDS,SAAC3B,GACd,GAAkB,IAAdA,EAAE4B,QAAN,CAGA,IACMP,EADc3B,EAAUI,QACHwB,wBACrBpB,KAAOF,EAAEuB,QAAUF,EAAKG,MACxBrB,KAAOH,EAAEyB,QAAUJ,EAAKK,KAC9BzB,EAAKC,EAAGC,KA8CJ0B,UAAW9B,EACX+B,WAAY/B,EACZN,IAAKC,EACLqC,MAAO,CACLC,OAAQ,eAGZ,wBAAQC,QA1BE,WACApC,IACRqC,UAAU,EAAG,EAAGC,OAAOC,WAAYD,OAAOC,YAE9CrB,KAsBE,sCACA,wBAAQkB,QAASlB,EAAjB,gCAuCSsB,EAlCU,WACvB,IAAI3C,EAAY4C,iBAAiC,MAuBjD,OArBAC,qBAAU,WACR,IACMnC,EADYV,EAAUI,QACXD,WAAW,MAEtB2C,EAAe,WACnBpC,EAAIY,OAAOyB,OACTN,OAAOO,YAAcP,OAAOC,WACJ,GAApBD,OAAOC,WACc,GAArBD,OAAOO,YACbtC,EAAIY,OAAO2B,MACTR,OAAOO,YAAcP,OAAOC,WACJ,GAApBD,OAAOC,WACc,GAArBD,OAAOO,aAMf,OAHAF,IACAL,OAAOS,iBAAiB,SAAUJ,GAE3B,kBAAML,OAAOU,oBAAoB,SAAUL,MACjD,IAGD,kCACE,gCACE,wCACA,cAACnD,EAAD,CAAYI,IAAKC,UCzHzBoD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFC,SAASC,eAAe,W","file":"static/js/main.4a1b5f30.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\n\ninterface IRect {\n  width: number;\n  height: number;\n  left: number;\n  right: number;\n  top: number;\n  bottom: number;\n}\n\nconst PureCanvas = React.forwardRef((props, ref: any) => {\n  const canvasRef = ref;\n  let mouseX: number | null = null;\n  let mouseY: number | null = null;\n  const getContext = (): CanvasRenderingContext2D => {\n    const canvas: any = canvasRef.current;\n    return canvas.getContext(\"2d\");\n  };\n\n  const OnClick = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (e.button !== 0) {\n      return;\n    }\n    const canvas: any = canvasRef.current;\n    const rect: IRect = canvas.getBoundingClientRect();\n    const x = ~~(e.clientX - rect.left);\n    const y = ~~(e.clientY - rect.top);\n    Draw(x, y);\n  };\n\n  const OnMove = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (e.buttons !== 1) {\n      return;\n    }\n    const canvas: any = canvasRef.current;\n    const rect: IRect = canvas.getBoundingClientRect();\n    const x = ~~(e.clientX - rect.left);\n    const y = ~~(e.clientY - rect.top);\n    Draw(x, y);\n  };\n\n  const DrawEnd = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    mouseX = null;\n    mouseY = null;\n    // Save();\n  };\n\n  const Draw = (x: number, y: number) => {\n    const ctx = getContext();\n    ctx.beginPath();\n    ctx.globalAlpha = 1.0;\n    if (mouseX === null || mouseY === null) {\n      ctx.moveTo(x, y);\n    } else {\n      ctx.moveTo(mouseX, mouseY);\n    }\n    ctx.lineTo(x, y);\n    ctx.lineCap = \"square\";\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = \"#000000\";\n    ctx.stroke();\n    mouseX = x;\n    mouseY = y;\n  };\n\n  const Reset = () => {\n    const ctx = getContext();\n    ctx.clearRect(0, 0, window.innerWidth, window.innerWidth);\n\n    Save();\n  };\n\n  const [base64Data, setbase64Data] = useState();\n  const Save = () => {\n    const canvas: any = canvasRef.current;\n    setbase64Data(canvas.toDataURL(\"image/png\", 0.85));\n  };\n\n  return (\n    <div>\n      <canvas\n        id=\"canvas\"\n        onMouseDown={OnClick}\n        onMouseMove={OnMove}\n        onMouseUp={DrawEnd}\n        onMouseOut={DrawEnd}\n        ref={canvasRef}\n        style={{\n          border: \"2px solid\",\n        }}\n      />\n      <button onClick={Reset}>リセット</button>\n      <button onClick={Save}>保存</button>\n    </div>\n  );\n});\n\nconst Canvas: React.FC = () => {\n  let canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n  useEffect(() => {\n    const ctx1: any = canvasRef.current!;\n    const ctx = ctx1.getContext(\"2d\");\n\n    const handleResize = () => {\n      ctx.canvas.height =\n        window.innerHeight > window.innerWidth\n          ? window.innerWidth * 0.8\n          : window.innerHeight * 0.8;\n      ctx.canvas.width =\n        window.innerHeight > window.innerWidth\n          ? window.innerWidth * 0.8\n          : window.innerHeight * 0.8;\n    };\n\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return (\n    <section>\n      <div>\n        <h1>あ</h1>\n        <PureCanvas ref={canvasRef} />\n      </div>\n    </section>\n  );\n};\n\nexport default Canvas;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Canvas from \"./canvas\";\nimport View from \"./view\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Canvas></Canvas>\n    {/* <View /> */}\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}